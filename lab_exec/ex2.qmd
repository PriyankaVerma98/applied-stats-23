---
title: "Lab 2 Exercises"
author: "Priyanka Verma"
date: today
date-format: "DD/MM/YY"
format: 
    pdf:
      toc: true
      number-sections: true
---
## Exercise 2
### load packages
```{r}
#| message: false
library(opendatatoronto)
library(tidyverse)
library(stringr)
library(skimr) # EDA
library(visdat) # EDA
library(janitor)
library(lubridate)
library(ggrepel)
```

```{r}
all_data <- list_packages(limit = 500)
head(all_data)
```

Download the data on TTC subway delays in 2022.

```{r}
res <- list_package_resources("996cfe8d-fb35-40ce-b569-698d51fc683b") # obtained code from searching data frame above #TTC Subway Delay Data 
res <- res |> mutate(year = str_extract(name, "202.?"))
delay_2022_ids <- res |> filter(year==2022) |> select(id) |> pull()

delay_2022 <- get_resource(delay_2022_ids)

# make the column names nicer to work with
delay_2022 <- clean_names(delay_2022)
```

```{r}
# note: I obtained these codes from the 'id' column in the `res` object above
delay_codes <- get_resource("3900e649-f31e-4b79-9f20-4731bbfd94f7")
delay_data_codebook <- get_resource("ca43ac3d-3940-4315-889b-a9375e7b8aa4")
```

### 1. Using the `delay_2022` data, plot the five stations with the highest mean delays. Facet the graph by `line`



### 2. Using the `opendatatoronto` package, download the data on mayoral campaign contributions for 2014.

```{r}
all_data <- list_packages(limit = 500)
head(all_data)
```

```{r}
res <- list_package_resources("f6651a40-2f52-46fc-9e04-b760c16edd5c") # obtained code from searching data frame above #TTC Subway Delay Data 

camp_data <- get_resource("5b230e92-0a22-4a15-9572-0b19cc222985")
camp_data_codebook <- get_resource("aaf736f4-7468-4bda-9a66-4bb592e9c63c")

typeof(camp_data)
typeof(camp_data[2])
mayoral_list <- camp_data[2][1]

mdf <- as.data.frame(mayoral_list)
```

### 3. Clean up the data format (fixing the parsing issue and standardizing the column names using `janitor`)
```{r}
#| message: false
#| echo: false
mdf <- janitor::row_to_names(mdf,1)
```

```{r}
#| message: false
#| echo: false
get_dupes(mdf)
mdf <- mdf |> distinct() # remove duplicates
```

### 4. Summarize the variables in the dataset. Are there missing values, and if so, should we be worried about them? Is every variable in the format it should be? If not, create new variable(s) that are in the right format.

```{r}
# change format of contribution amount
mdf$`Contribution Amount` <- as.numeric(mdf$`Contribution Amount`)

#summarisation of vars in the data
skim(mdf)
```

```{r}
#understanding missing vals
mdf |> summarize(across(everything(), ~ sum(is.na(.x))))

#vis_dat(mdf) # commented as this gives error in running script
#vis_miss(mdf)
```

There are multiple missing values in the data. However, that would not hinder in our analysis. The missing values of variables can be seen as an attempt to uphold privacy and security about the participants.

### 5. Visually explore the distribution of values of the contributions. What contributions are notable outliers? Do they share a similar characteristic(s)? It may be useful to plot the distribution of contributions without these outliers to get a better sense of the majority of the data.

```{r}
options(scipen=999) # to disable scientific notations in plot
#box plot 
boxplot(mdf$`Contribution Amount`) 
```

This shows that the most notable outlier is the contribution amount lying above 500k. Create a new plot by removing values above 100k-

```{r}
mdf2 <- mdf |> 
  filter(mdf$`Contribution Amount` < 100000)

boxplot(mdf2$`Contribution Amount`) 
```

The values equal or above 20k can again be considered as outliers.

```{r}
mdf2 <- mdf2 |> 
  filter(mdf2$`Contribution Amount` < 20000)

boxplot(mdf2$`Contribution Amount`) 
```

```{r}
#line graph
ggplot(data = mdf2) + 
  geom_histogram(aes(x = `Contribution Amount`)) 

```

Based on the line graph, the values above 3000 can be considered as outliers. To understand the outlier values--
```{r}
mdf_outl <- mdf |> 
  filter(mdf$`Contribution Amount` >= 3000)
```

A common characteristic of these values is that most of these high outlier contributions (6, out of 10) are from a person belonging to Ford family- either Ford Doug or Ford Rob.

### 6. List the top five candidates in each of these categories:
    -   total contributions
    -   mean contribution
    -   number of contributions
```{r}
mdf_summary <- mdf |> 
  group_by(`Contributor's Name`) |>
  summarise( total_c = sum(`Contribution Amount`), mean_c = mean(`Contribution Amount`, na.rm = TRUE), count_c = n())
```

top 5 contributors based on Total contributions-

```{r}
as.list(slice_max(mdf_summary,total_c, n = 5)$'Contributor\'s Name' )
```

top 5 contributors based on Mean contributions-

```{r}
as.list(slice_max(mdf_summary,mean_c, n = 5)$'Contributor\'s Name' )
```

top 5 contributors based on number of contributions-

```{r}
as.list(slice_max(mdf_summary,count_c, n = 5)$'Contributor\'s Name' )
```

### 7. Repeat 5 but without contributions from the candidates themselves.

```{r}
df_7 <- mdf |>
  filter(mdf$`Contributor's Name` != mdf$Candidate )
```

```{r}
boxplot(df_7 $`Contribution Amount`) 
```

The box plot shows that the potential outliers have contribution amount above 1000.

```{r}
df7_outl <- df_7 |> 
  filter(df_7$`Contribution Amount` >= 1000)
```

#### data characteristics of outlier data

Candidate Tory, John received the contributions from maximum contributors.

```{r}
table(df7_outl$Candidate) 
```

### 8. How many contributors gave money to more than one candidate?

```{r}
df_8 <- count(df_7,`Contributor's Name`) |>
  filter(n>1)

dim(df_8)[1]
```

1410 contributors gave to more than 1 candidate.
